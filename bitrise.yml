format_version: '11'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

workflows:
  ios:
    meta:
        bitrise.io:
            stack: osx-xcode-16.2.x
    steps:
    - git-clone@8: {}
    - cache-pull@2: {}

    - npm@1:
        inputs:
        - command: install
        title: npm install

    - npm@1:
        title: Install Expo CLI
        inputs:
        - command: install -g expo-cli

    - script@1:
        title: Install CocoaPods
        inputs:
        - content: |-
            #!/bin/bash
            cd ios && pod install

    - script@1:
        title: Create Expo Dev Build
        inputs:
        - content: |-
            #!/bin/bash
            npx expo prebuild

    - script@1:
        title: Start Metro Bundler
        inputs:
        - content: |-
            #!/bin/bash
            npx expo start &
            sleep 10  # Give Metro some time to start up
            
    - script@1:
        title: Detox Build iOS
        inputs:
        - content: |-
            #!/bin/bash
            echo "creating dir"
            # Create log directory
            mkdir -p "$BITRISE_DEPLOY_DIR/build_logs"
            echo "dir created"

            ls -ls $BITRISE_DEPLOY_DIR


            npm run test:e2e:build:ios > "$BITRISE_DEPLOY_DIR/build_logs/xcode_buildlog.txt"
          
            # Save the exit code (important!)
            #BUILD_EXIT_CODE=${PIPESTATUS[0]}

            # Compress the log if it's large
            cd "$BITRISE_DEPLOY_DIR"
            gzip build_logs

            echo "Build logs saved to artifacts"

            ls -ls $BITRISE_DEPLOY_DIR
            ls -ls $BITRISE_DEPLOY_DIR/build_logs

            # Exit with the original npm command exit code
            #exit $BUILD_EXIT_CODE 

    - script@1:
        title: Detox Test iOS
        inputs:
        - content: |-
            #!/bin/bash
            npm run test:e2e:ios

    - cache-push@2: {}

    - deploy-to-bitrise-io@2: {}

  android:
    meta:
        bitrise.io:
            stack: linux-docker-android-22.04
    steps:
    - git-clone@8: {}
    - restore-gradle-cache@2: {}

    - set-java-version@1:
        inputs:
        - set_java_version: '17'

    - npm@1:
        inputs:
        - command: install
        title: npm install

    - npm@1:
        title: Install Expo CLI
        inputs:
        - command: install -g expo-cli

    - script@1:
        title: Create Expo Dev Build
        inputs:
        - content: |-
            #!/bin/bash
            npx expo prebuild

    - install-missing-android-tools@3:
        inputs:
        - gradlew_path: $PROJECT_LOCATION/gradlew

    - android-build@1:
        inputs:
        - project_location: $PROJECT_LOCATION
        - module: app
        - variant: debug
        - build_type: apk

    - android-build@1:
        inputs:
        - project_location: $PROJECT_LOCATION
        - module: app
        - variant: debugAndroidTest
        - build_type: apk

    - script@1:
        title: Copy APK for Detox
        inputs:
        - content: |-
            #!/bin/bash
            # Ensure directory exists
            mkdir -p android/app/build/outputs/apk/debug
            
            # Copy APK to Detox expected location
            cp "$BITRISE_DEPLOY_DIR/app-debug.apk" "android/app/build/outputs/apk/debug/app-debug.apk"
            cp "$BITRISE_DEPLOY_DIR/app-debug-androidTest.apk" "android/app/build/outputs/apk/debug/app-debug-androidTest.apk"
            
            # Verify both files exist
            if [ -f "android/app/build/outputs/apk/debug/app-debug.apk" ] && [ -f "android/app/build/outputs/apk/debug/app-debug-androidTest.apk" ]; then
                echo "Both APKs copied to expected location"
            else
                echo "Failed to copy one or both APKs"
                exit 1
            fi
    
    - script@1:
        title: Start Metro Bundler
        inputs:
        - content: |-
            #!/bin/bash
            npx expo start &
            sleep 10  # Give Metro some time to start up

    - avd-manager@2:
        inputs:
        - api_level: "30"
        - profile: pixel_4
        - emulator_id: Pixel_4_API_30

    - wait-for-android-emulator@1: 
        inputs:
        - android_home: $ANDROID_SDK_ROOT

    - script@1:
        title: Test App Installation
        inputs:
        - content: |-
            #!/bin/bash
            echo "=== Installing APK ==="
            $ANDROID_SDK_ROOT/platform-tools/adb -s "$BITRISE_EMULATOR_SERIAL" install -r android/app/build/outputs/apk/debug/app-debug.apk
            
            echo "=== Installing Test APK ==="
            $ANDROID_SDK_ROOT/platform-tools/adb -s "$BITRISE_EMULATOR_SERIAL" install -r android/app/build/outputs/apk/debug/app-debug-androidTest.apk
            
            echo "=== App Package Info ==="
            $ANDROID_SDK_ROOT/platform-tools/adb -s "$BITRISE_EMULATOR_SERIAL" shell pm list packages | grep bitrise

            echo "=== Starting App ==="
            $ANDROID_SDK_ROOT/platform-tools/adb -s "$BITRISE_EMULATOR_SERIAL" shell am start -n io.bitrise.BitriseReactNativeDetoxSample/io.bitrise.BitriseReactNativeDetoxSample.MainActivity


    - script@1:
        title: Detox Test Android
        inputs:
        - content: |-
            #!/bin/bash
            npm run test:e2e:android

    - save-gradle-cache@1: {}

  deploy_ota:
    steps:
    - restore-cache@2:
        title: Restore node cache
        inputs:
        - key: asdf-node-mac-m1
    - script@1:
        title: Install node versions
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            # set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            # set -o pipefail
            # debug log
            # set -x

            echo "legacy_version_file = yes" >> /Users/vagrant/.asdfrc
            cat /Users/vagrant/.asdfrc
            asdf install nodejs 18.13.0
            asdf global nodejs 18.13.0
            asdf reshim
            npm install --global yarn@1.18.0
            envman add --key PATH --value $PATH
    - save-cache@1:
        title: Save node cache
        inputs:
        - paths: "/Users/vagrant/.asdf/installs/nodejs/"
        - verbose: 'true'
        - is_key_unique: 'true'
        - key: asdf-node-mac-m1
    - script@1:
        title: Setup project
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            cd ios
            echo "defaults.url=https://sentry.io/" > sentry.properties
            echo "defaults.org=people-center-inc" >> sentry.properties
            echo "defaults.project=rippling-mobile-app" >> sentry.properties
            echo "auth.token=$SENTRY_CLI_ORG_AUTH_TOKEN" >> sentry.properties
            cd ..
            cat ios/sentry.properties
    - restore-cache@2:
        title: Restore yarn cache
        inputs:
        - key: '{{ .OS }}-{{ .Arch }}-npm-cache-{{ checksum "yarn.lock" }}'
    - yarn@0:
        inputs:
        - cache_local_deps: 'yes'
    - script@1:
        title: Setup Expo EAS CLI
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            npm install --global eas-cli
    - script@1:
        title: Increment Version
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            echo $VERSION
            echo $VERSIONCODE
            echo $JSVERSION

            # update version versionCode and jsVersion in app.json
            jq '.expo.version = "'$VERSION'"' app.json > app2.json && mv app2.json app.json
            jq '.expo.runtimeVersion = "'$VERSION'"' app.json > app2.json && mv app2.json app.json
            jq '.expo.versionCode = '$VERSIONCODE'' app.json > app2.json && mv app2.json app.json
            jq '.expo.jsVersion = '$JSVERSION'' app.json > app2.json && mv app2.json app.json
            cat app.json
    - script@1:
        title: OTA Update Android
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x
            export SENTRY_PROPERTIES=./android/sentry.properties
            eas update --auto --channel production --platform android --skip-bundler  
    - restore-cache@2:
        title: Restore cache for ios
        inputs:
        - key: daily-metro-cache-mac-ios
        - verbose: 'true'
    - script@1:
        title: OTA Update iOS
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x
            export SENTRY_PROPERTIES=./ios/sentry.properties
            eas update --auto --channel production --platform ios --skip-bundler
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
  
  test:
    meta:
        bitrise.io:
            stack: linux-docker-android-22.04
    steps:
    - avd-manager@2:
        inputs:
        - api_level: "30"
        - profile: pixel_4
        - emulator_id: Pixel_4_API_30

    - wait-for-android-emulator@1: 
        inputs:
        - android_home: $ANDROID_SDK_ROOT

    - script@1:
        title: Debug Emulator Info
        inputs:
        - content: |-
            #!/bin/bash
            printenv
            echo "BITRISE_EMULATOR_SERIAL: $BITRISE_EMULATOR_SERIAL"
            $ANDROID_SDK_ROOT/platform-tools/adb devices -l
            $ANDROID_SDK_ROOT/platform-tools/adb devices -s "$BITRISE_EMULATOR_SERIAL" emu avd name
            $ANDROID_SDK_ROOT/platform-tools/adb devices -s "$BITRISE_EMULATOR_SERIAL" emu avd id

  
app:
  envs:
  # iOS
  - BITRISE_PROJECT_PATH: ios/BitriseReactNativeDetoxSample.xcworkspace
  - BITRISE_SCHEME: BitriseReactNativeDetoxSample
  # Android
  - PROJECT_LOCATION: android
  - BITRISE_APK_PATH: android/app/build/outputs/apk/debug/app-debug.apk
  - ANDROID_HOME: /opt/android-sdk

meta:
  bitrise.io:
    stack: osx-xcode-16.2.x